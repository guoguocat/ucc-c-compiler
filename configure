#!/bin/sh

set -e

warn(){
	echo "$@" >&2
}

err(){
	warn "$@"
	exit 1
}

usage(){
	cat >&2 <<!
Usage: $0 [--as=path/to/as] [--target=...] [--with-ucc-lib] [clean]
!
	exit 1
}

set_leading_underscore(){
	UCC_CPPFLAGS="-D__LEADING_UNDERSCORE $UCC_CPPFLAGS"
	UCC_CFLAGS="-fleading-underscore $UCC_CFLAGS"
}

guess_arch(){
	uname -m
}

# -D__LEADING_UNDERSCORE, etc
UCC_CPPFLAGS=

# -fleading-underscore, etc
UCC_CFLAGS=

# system assembler to use
UCC_AS=as

# assembler 'private' label prefix
ASM_PLBL=.L
AS_MAX_INTMOV_BIT=31

# assume GNU as - specify word size
UCC_AS_ARGS_M32='"--32"'
UCC_AS_ARGS_M64='"--64"'

# system linker to use, and flags it needs
UCC_LD=ld
UCC_LDFLAGS=

# cpp's include path(s)
# TODO: option to use local ./lib path
UCC_INC="-I/usr/include"

# lib settings
LIB_CFLAGS=


# arguments
clean=0
get_arg='echo "$arg" | cut -d= -f2'

i=1
while [ $i -le $# ]
do
	arg=`eval echo '$'"$i"`
	case "$arg" in
		--as=*)
			UCC_AS="`eval $get_arg`"
			;;
		--target=*)
			UCC_ARCH="`eval $get_arg`"
			ARCH_DIR=lib/arch
			if ! [ -d $ARCH_DIR/"$UCC_ARCH" ]
			then
				warn "target '$UCC_ARCH' invalid, choices are:"
				(cd $ARCH_DIR; ls -d */)
				usage
			fi
			;;
		--with-ucc-lib)
			UCC_INC="-Ilib/"
			UCC_CRT="lib/crt.a"
			UCC_STDLIB="lib/libc.a"
			UCC_DYN=''
			;;
		clean)
			clean=1
			;;
		*)
			usage
	esac
	i=`expr $i + 1`
done

if [ $clean -ne 0 ]
then
	rm -f config.mk lib/string_strerrs.h lib/syscalls_darwin.h
	exit
fi

# guess arch if not specified
if [ -z "$UCC_ARCH" ]
then UCC_ARCH=$(guess_arch)
fi

# normalise arch
case "$UCC_ARCH" in
	i?86|x86_64|amd64)
		# map all i?86 archs to i386
		if [ "$UCC_ARCH" = x86_64 ] || [ "$UCC_ARCH" = amd64 ]
		then
			UCC_SUBARCH=x86_64
			LIB_CFLAGS=-m64
		else
			UCC_SUBARCH=i386
			LIB_CFLAGS=-m32
		fi
		UCC_ARCH=x86
		;;
	mipsel)
		UCC_ARCH=mipsel
		UCC_SUBARCH=mipsel
		;;
	*)
		err "$0: unknown arch '$UCC_ARCH'"
esac

# defaults for an OS
unam_os="$(uname -s)"
case "$unam_os" in
	Linux)
		# assume gcc
		unam_lc="$(echo "$unam_os" | tr A-Z a-z)"
		# FIXME: gcc specific + version specific
		UCC_INC="$UCC_INC -I/usr/include/$UCC_ARCH-$unam_lc-gnu -I/usr/lib/gcc/$UCC_ARCH-$unam_lc-gnu/4.7.2/include"

		UCC_DYN="-dynamic-linker /lib64/ld-linux-x86-64.so.2"
		UCC_STDLIB="-lc"

		UCC_CRT="$UCC_CRT:/usr/lib/x86_64-linux-gnu/crt1.o"
		UCC_CRT="$UCC_CRT:/usr/lib/x86_64-linux-gnu/crti.o"
		UCC_CRT="$UCC_CRT:/usr/lib/gcc/x86_64-linux-gnu/4.6/crtbegin.o"
		UCC_CRT="$UCC_CRT:/usr/lib/gcc/x86_64-linux-gnu/4.6/crtend.o"
		UCC_CRT="$UCC_CRT:/usr/lib/x86_64-linux-gnu/crtn.o"
		;;

	FreeBSD)
		UCC_CRT="/usr/lib/crt1.o:/usr/lib/crti.o:/usr/lib/crtbegin.o:/usr/lib/crtend.o:/usr/lib/crtn.o"
		UCC_STDLIB="-lc"
		;;

	Darwin)
		UCC_CFLAGS='-mpreferred-stack-boundary=4' # 2^4 = 16 byte aligned
		UCC_STDLIB='-lSystem'
		UCC_CRT='-lcrt1.o'
		UCC_LDFLAGS='-macosx_version_min 10.5'
		ASM_PLBL=L
		AS_MAX_INTMOV_BIT=30

		if [ "$UCC_ARCH" = x86 ]
		then
			UCC_AS_ARGS_M32="\"-arch\", \"i386\""
			UCC_AS_ARGS_M64="\"-arch\", \"x86_64\""
		else
			echo >&2 "Darwin on non-x86?"
			exit 1
		fi
		set_leading_underscore
		;;

	CYGWIN_NT-*)
		set_leading_underscore
		;;
esac

# join dynamic linker flags to ld-flags
UCC_LDFLAGS="$UCC_LDFLAGS $UCC_DYN"

# figure out OS
case "$unam_os" in
	Darwin|Linux|FreeBSD)
		# these are fine verbatim
		;;

	CYGWIN_NT-*)
		unam_os=Cygwin
		;;

	*)
		err "unknown OS ($unam_os)"
		;;
esac

# write out settings:

# variables for lib/Makefile
cat > config.mk <<!
UCC_AS      = ${UCC_AS}
UCC_LD      = ${UCC_LD}
UCC_LDFLAGS = ${UCC_LDFLAGS}
UCC_ARCH    = ${UCC_ARCH}
UCC_SUBARCH = ${UCC_SUBARCH}
CFLAGS      = ${LIB_CFLAGS}
!

# variables used by the ucc driver
cat > src/ucc/cfg.h <<!
#define UCC_AS      "${UCC_AS}"
#define UCC_LD      "${UCC_LD}"
#define UCC_INC     "${UCC_INC}"

#define UCC_CPPFLAGS "${UCC_CPPFLAGS}"
#define UCC_CFLAGS   "${UCC_CFLAGS}"
#define UCC_LDFLAGS  "${UCC_LDFLAGS}"

#define UCC_STDLIB "${UCC_STDLIB}"
#define UCC_CRT    "${UCC_CRT}"

#define UCC_AS_ARGS_M32 ${UCC_AS_ARGS_M32}
#define UCC_AS_ARGS_M64 ${UCC_AS_ARGS_M64}
!


# section names and asm private label prefix
if [ "$unam_os" = Darwin ]
then
	SECTION_TEXT="__TEXT,__text"
	SECTION_DATA="__DATA,__data"
	SECTION_BSS="__BSS,__bss"
else
	SECTION_TEXT=".text"
	SECTION_DATA=".data"
	SECTION_BSS=".bss"
fi
cat > src/as_cfg.h <<!
#define SECTION_TEXT $SECTION_TEXT
#define SECTION_DATA $SECTION_DATA
#define SECTION_BSS  $SECTION_BSS
#define ASM_PLBL_PRE "$ASM_PLBL"
/* Darwin's 'as' can only create movq:s with
 * immediate operands whose highest bit is bit
 * 31 or lower (i.e. up to UINT_MAX)
 */
#define AS_MAX_INTMOV_BIT $AS_MAX_INTMOV_BIT
!

# lib/syscall headers
if ! which perl > /dev/null
then
	if [ "$unam_os" = Darwin ]
	then m=" (and darwin syscalls)"
	fi
	warn "Perl not found, generate strerror$m yourself"
else
	perl -e '
	for(1 .. 100){
		$! = $_;
		printf "\t\"%s\",\n", $!;
	}' > lib/string_strerrs.h

	if [ "$unam_os" = Darwin ]
	then perl lib/syscalls_darwin.pl < lib/syscalls_darwin_unix.h > lib/syscalls_darwin.h
	fi
fi

# src/ warnings
if [ "$unam_os" = Cygwin ]
then echo "CFLAGS += -Wno-char-subscripts"
fi > src/src_config_platform.mk


echo "Configured for $UCC_SUBARCH $unam_os"
