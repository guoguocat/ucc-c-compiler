#!/usr/bin/perl
use strict;

my @ignores;


sub interrupt
{
	exit 25
}

sub basename
{
	my $f = shift;
	return $1 if $f =~ m;/([^/]+)$;;
	return $f;
}

sub usage
{
	die "Usage: $0 [-v] [-i ignore-file] [tests...]\n";
}

sub read_ignores
{
	my $f = shift;
	open F, '<', $f or die "open $f: $!";

	my @f =
		grep { length }
		map { s/ *#.*//; $_ }
		map { chomp $_; $_ } <F>;

	close F;
	return @f;
}

sub test
{
	my %args = @_; # keys = file, output, verbose

	my $pid = fork();
	if($pid == 0){
		# ./test.pl -v "$1" < /dev/null > "$2" 2>&1
		open STDIN, '</dev/null' or die;
		open STDOUT, '>', $args{output} or die;
		open STDERR, '>&STDOUT' or die;

		my @args = @args{file};
		unshift @args, '-v' if $args{verbose};
		exec './test.pl', @args;
		die "exec: $!";
	}
	if(wait() != $pid){
		die "bad wait return? $!";
	}

	my $r = $?;
	return $r;
}

sub cat_indent_file
{
	my $f = shift;
	open F, '<', $f or die "open $f: $!\n";
	print "\t$_" while <F>;
	close F;
}

sub ignored
{
	my $f = shift;
	for(@ignores){
		if(index($f, $_) != -1){
			return 1;
		}
	}
	return 0;
}

$SIG{INT} = \&interrupt;

my $verbose = 0;
my $ign_file = undef;
my @tests;

for(my $i = 0; $i < @ARGV; $i++){
	if($ARGV[$i] eq '-v'){
		$verbose = 1;
	}elsif($ARGV[$i] eq '-i'){
		my $f = $ARGV[++$i];
		usage() unless $f;
		$ign_file = $f;

	}else{
		push @tests, $ARGV[$i];
	}
}

@ignores = read_ignores($ign_file) if $ign_file;

my $tdir = '/tmp/ucc.test/';
if(not -d $tdir and not mkdir($tdir)){
	die "mkdir: $!";
}

my $ec = 0;

sub find_tests
{
	# DFS
	my @found;
	for(my $i = 0; $i < @_; $i++){
		$_ = $_[$i];
		if(-d $_){
			push @found, find_tests(glob "$_/*");
		}elsif($_ =~ /\.c$/){
			push @found, $_;
		}
	}
	return @found;
}

my @test_files = find_tests(@tests);
die "$0: no tests\n" unless @test_files;

for my $f (@test_files){
	chomp($f);

	print "$0: $f\n" if $verbose;

	my %args = (
		file => $f,
		output => "$tdir/" . basename($f),
		verbose => $verbose
	);

	my $rc = test(%args);

	if($rc & 127){
		die "test caught signal " . ($rc & 127) . "\n";
	}

	my $desc;
	if($rc){
		$desc = 'fail';
	}else{
		$desc = 'pass';
	}

	my $ignored = ignored($f);

	print "$desc"
	. ($ignored ? ' (expected)' : '')
	. ": $f\n";

	if($ignored != !!$rc){
		$ec = 1;
		# dump output
		cat_indent_file($args{output});
	}
}

exit $ec;
