All types start at the base - int, short, struct, union, etc
We then get to other types with qualifiers, pointers, arrays and functions.
e.g.

int
\- typedef int int32_t
   \- int32_t get_int32(<reference to struct A *>)

char
\- const char
   \- const char *
      \- const char *const

struct A
\- struct A [2]
\- struct A [10]
\- struct A []

Each array type is different if it has a different size.

There are several different instances that a type can be in, these are defined
in type.h

Some examples:

int = {
	.type = type_btype,
	.bits.type = <"int" btype>      // ".bits" is the convention for unions
}

char * = {
	.type = type_ptr,
	.ref = {
		.type = type_btype,
		.bits.type = <"char" btype>
	}
}

void (*func)() = {
	.type = type_ptr,
	.ref = {
		.type = type_func,
		.bits.func = <information on function arguments>

		.ref = {
			.type = type_btype,
			.bits.type = <"void" btype>
		}
	}
}


So stepping down the '.ref' chain in types, we step down the type structure.

Dereferencing a pointer type returns the .ref type in the chain, calling a
function type moves down the chain to pull out the return type, and so on.
