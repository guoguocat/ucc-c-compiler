updated bugs/ and test/

asm_backend_recode:
	local static variables
	op_struct_* and op_deref into their own expressions

---------------------------------------------------- cc1

const-fold: change interface and checking of ->val.iv.val to more explicit code
            also need type casts for overflows, etc

_Generic const-ify

extern int i;
extern int i;
extern int i = 5; // this defines i. similar for functions - probably in now...?

inline semantics - probably in now...?

reachability checking - non-void function returns - probably in now...?

__alignof__/_Alignof, _Alignas(type/const-expr):
	same as sizeof except:
		doubles: { linux32 => 4, win32 => 8, linux64 => 8 }
		longs + doubles + ptrs change as their sizeof changes (x86 vs x64)
	for structs/unions, it is the alignment of the largest type

-Wmissing-prototypes - increase statics (in Makefile)
  redundant-decls
	nested-externs

int x[] -> NULL init, not 0

floats, long + short (in a branch)

initialisers
	arrays and structs:
		{ { 0 }, 5, {{{2}}} }
		e.g. int a[] = { ... };
	c99 struct/union init
		{ .a = 5 }

static analysis for labels - flag unused labels

bitfields: must be ints,
	can't be addressed,
	nor sizeof()'d
	also: struct x { int i : 1; : 3; } is valid (but not for the first field)

const:
	const char *s; - *s is not writable, s is
	const char *a = "hi";
	int x(char *s);
	x(a); // warning - removing const
	// same for assignments

32-bit code gen

-fms-extensions - MS unnamed struct members

general lhs assignment:
	(b ? x : y) = 5;
	^-- note: gnu extension
	(x ? a : b)(2); // similarly
	(x = y) = 2; // assign to x

__attribute__((pure))
- function with no side effects (e.g. strlen())

get rid of __asm__ hacks (mainly in gen_asm.c)

stabs/dwarf debugging annotations

fastcall - ecx, edx, stack, etc (__attribute__)
- see Windows name mangling - https://en.wikipedia.org/wiki/Name_mangling

extensions:
	namespace [str] { ... }
	classes?
	__attribute__((overloadable)) - clang

---------------------------------------------------- cpp

fix memory leaks

fix dir-relative file opening:
	cc -E dir/x.c
	doesn't work, but
	cd dir; cc -E x.c
	does

cc -MM *.c

push current_line when descending into #include/# [0-9] for cc1

macros over multiple lines
	#define a(x, y) x + y
	a(
		1,
		2
	)

---------------------------------------------------- lib

stdio - buffers, etc
