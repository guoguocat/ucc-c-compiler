update bugs/
test/ - x.c and x.c.expect (output and assembly)

struct initialisation
	Update all compound lit. tests with structs when parsing complete (and then designated inits when complete)

static store and static address-of store
	i.e. int x = 5; vs int *x = &(int){5};

machine target - currently between x86_64 and vm

---------------------------------------------------- cc1

const-fold: change interface and checking of ->val.iv.val to more explicit code
            also need type casts for overflows, etc

__alignof__/_Alignof, _Alignas(type/const-expr):
	same as sizeof except:
		doubles: { linux32 => 4, win32 => 8, linux64 => 8 }
		longs + doubles + ptrs change as their sizeof changes (x86 vs x64)
	for structs/unions, it is the alignment of the largest type

-Wmissing-prototypes - increase statics (in Makefile)
	redundant-decls
	nested-externs

initialisers [partially complete]
	arrays and structs:
		{ { 0 }, 5, {{{2}}} }
		e.g. int a[] = { ... };
	c99 struct/union init
		{ .a = 5 }

static analysis for labels - flag unused labels

bitfields: must be ints,
	can't be addressed,
	nor sizeof()'d
	also: struct x { int i : 1; : 3; } is valid (but not for the first field)

32-bit code gen

-fms-extensions - MS unnamed struct members

general lhs assignment (gnu extension):
	(b ? x : y) = 5;

__attribute__((pure))
- function with no side effects (e.g. strlen())

stabs/dwarf debugging annotations

__attribute__((fastcall)), cdecl, etc
- see Windows name mangling - https://en.wikipedia.org/wiki/Name_mangling

extensions:
	namespace [str] { ... }
	classes?
	__attribute__((overloadable)) - clang

---------------------------------------------------- cpp

fix memory leaks

fix dir-relative file opening (for #include <>):
	cc -E dir/x.c
	doesn't work, but
	cd dir; cc -E x.c
	does

cc -MM *.c

macros over multiple lines
	#define a(x, y) x + y
	a(
		1,
		2
	)

---------------------------------------------------- lib

stdio buffers, etc
